;; -*- mode: emacs-lisp -*-

(defun dotspacemacs/layers ()
  (setq-default
   dotspacemacs-additional-packages
   '(
     ace-isearch
     all-the-icons
     all-the-icons-dired
     fira-code-mode ;; https://github.com/tonsky/FiraCode/files/412440/FiraCode-Regular-Symbol.zip
     groovy-mode
     migemo ;; brew install cmigemo
     terraform-mode
     textile-mode
     toml-mode
     undohist
     ;; redo+
     )
   dotspacemacs-ask-for-lazy-installation t
   dotspacemacs-configuration-layer-path '()
   dotspacemacs-configuration-layers
   '(
     ;; Checkers
     spell-checking ;; brew install ispell
     syntax-checking
     ;; Completion
     auto-completion
     helm
     ;; Distributions
     spacemacs
     spacemacs-base
     spacemacs-bootstrap
     ;; Emacs
     (better-defaults :variables
                      better-defaults-move-to-beginning-of-code-first t
                      better-defaults-move-to-end-of-code-first t)
     ibuffer
     semantic
     smex
     ;; Fun
     emoji
     ;; Operating systems
     osx
     ;; Programming languages
     (c-c++ :variables
            c-basic-offset 2)
     csv
     emacs-lisp
     (go :variables
         go-tab-width 2
         gofmt-command "goimports")
     (html :variables
           css-indent-offset 2
           cssm-indent-function #'cssm-c-style-indenter)
     (javascript :variables ;; npm install -g tern js-beautify eslint
                 coffee-tab-width 2
                 javascript-disable-tern-port-files nil
                 js-indent-level 2
                 js2-basic-offset 2)
     (markdown :valiables ;; brew install multimarkdown && npm install -g vmd
               markdown-command "multimarkdown"
               markdown-live-preview-engine 'vmd)
     ;; (plantuml :valiables ;; brew install plantuml
     ;;           plantuml-default-exec-mode 'jar
     ;;           plantuml-jar-path "/usr/local/opt/plantuml/libexec/plantuml.jar")
     python
     (ruby :variables ;; gem install pry pry-doc ruby_parser rubocop
           ruby-insert-encoding-magic-comment nil
           ruby-test-runner 'rspec
           ruby-version-manager 'rvm)
     shell-scripts
     yaml
     ;; Source control
     (git :variables
          vc-follow-symlinks t)
     github
     ;; Spacemacs
     spacemacs-completion
     spacemacs-editing
     spacemacs-editing-visual
     spacemacs-layouts
     spacemacs-misc
     spacemacs-ui
     spacemacs-ui-visual
     ;; Tags
     gtags ;; brew install global --with-pygments --with-ctags
     ;; Tools
     ansible
     docker
     imenu-list
     nginx
     systemd
     ;; Vim
     vim-powerline ;; brew install ricty --with-powerline
     ;; Web services
     ;; (wakatime :variables
     ;;           wakatime-api-key  (replace-regexp-in-string "\n+$" ""
     ;;                                                       (shell-command-to-string "grep api_key ~/.wakatime.cfg | awk '{print $3}'"))
     ;;           wakatime-cli-path (replace-regexp-in-string "\n+$" ""
     ;;                                                       (shell-command-to-string "which wakatime")))
     )
   dotspacemacs-distribution 'spacemacs
   dotspacemacs-enable-lazy-installation 'unused
   dotspacemacs-excluded-packages '()
   dotspacemacs-frozen-packages '()
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  (setq-default
   dotspacemacs-active-transparency 90
   dotspacemacs-auto-resume-layouts nil
   dotspacemacs-auto-save-file-location nil
   dotspacemacs-check-for-update t
   dotspacemacs-colorize-cursor-according-to-state t
   dotspacemacs-default-font '("Liga Ricty for Powerline"
                               :powerline-scale 1.1
                               :size 16
                               :weight normal
                               :width normal)
   dotspacemacs-default-layout-name "Default"
   dotspacemacs-default-package-repository nil
   dotspacemacs-display-default-layout nil
   dotspacemacs-distinguish-gui-tab nil
   dotspacemacs-editing-style 'emacs
   dotspacemacs-elpa-https t
   dotspacemacs-elpa-subdirectory nil
   dotspacemacs-elpa-timeout 5
   dotspacemacs-emacs-command-key "SPC"
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-enable-paste-transient-state nil
   dotspacemacs-ex-command-key ":"
   dotspacemacs-ex-substitute-global nil
   dotspacemacs-folding-method 'evil
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native nil
   dotspacemacs-helm-no-header t
   dotspacemacs-helm-position 'bottom
   dotspacemacs-helm-resize nil
   dotspacemacs-helm-use-fuzzy 'always
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-inactive-transparency 90
   dotspacemacs-large-file-size 1
   dotspacemacs-leader-key "SPC"
   dotspacemacs-line-numbers t
   dotspacemacs-loading-progress-bar t
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-max-rollback-slots 10
   dotspacemacs-maximized-at-startup nil
   dotspacemacs-mode-line-unicode-symbols t
   dotspacemacs-persistent-server nil
   dotspacemacs-remap-Y-to-y$ nil
   dotspacemacs-retain-visual-state-on-shift t
   dotspacemacs-scratch-mode 'text-mode
   dotspacemacs-search-tools '("rg", "ag" "pt" "ack" "grep") ;; brew install ripgrep
   dotspacemacs-show-transient-state-color-guide t
   dotspacemacs-show-transient-state-title t
   dotspacemacs-smart-closing-parenthesis nil
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-smooth-scrolling t
   dotspacemacs-startup-banner 'official
   dotspacemacs-startup-buffer-responsive t
   dotspacemacs-startup-lists '(nil nil)
   dotspacemacs-themes '(spacemacs-dark)
   dotspacemacs-verbose-loading nil
   dotspacemacs-visual-line-move-text nil
   dotspacemacs-which-key-delay 0.4
   dotspacemacs-which-key-position 'bottom
   dotspacemacs-whitespace-cleanup t
   ))

(defun dotspacemacs/user-init ()
  (defmacro add-auto-mode (name mode)
    `(setq auto-mode-alist (cons '(,name . ,mode) auto-mode-alist)))
  (defmacro add-hook-fn (name &rest body)
    `(add-hook ,name #'(lambda () ,@body)))
  )

(defun dotspacemacs/user-config ()
  (custom-set-variables
   '(auto-save-default nil)
   '(auto-save-list-file-name nil)
   '(auto-save-list-file-prefix nil)
   '(backup-inhibited t)
   '(blink-cursor-mode nil)
   '(comment-empty-lines t)
   '(create-lockfiles nil)
   '(delete-auto-save-files t)
   '(indent-tabs-mode nil)
   '(inhibit-startup-screen t)
   '(initial-scratch-message nil)
   '(kill-whole-line t)
   '(make-backup-files nil)
   '(menu-bar-mode nil)
   '(next-line-add-newlines nil)
   '(require-final-newline t)
   '(scroll-bar-mode nil)
   '(tool-bar-mode nil)
   '(transient-mark-mode t))
  ;; Clipboard
  ;; https://gist.github.com/the-kenny/267162
  (setenv "LANG" "ja_JP.UTF-8")
  (setq interprogram-cut-function
        (lambda (text &optional push)
          (let ((process-connection-type nil))
            (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
              (process-send-string proc text)
              (process-send-eof proc)))))
  (setq interprogram-paste-function
        (lambda ()
          (shell-command-to-string "pbpaste")))
  ;; Completion
  (setq read-buffer-completion-ignore-case t
        read-file-name-completion-ignore-case t)
  ;; Emacs Plus
  (setq default-frame-alist '((ns-transparent-titlebar . t)
                              (ns-appearance . dark))
        frame-title-format nil
        ns-use-proxy-icon nil)
  ;; Hook
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; Keybind
  (define-key query-replace-map [return] 'act)
  (global-set-key (kbd "C-c r r") 'replace-regexp)
  (global-set-key (kbd "C-c r s") 'replace-string)
  ;; Mouse
  (global-set-key [mouse-4] '(lambda () (interactive) (scroll-down 1)))
  (global-set-key [mouse-5] '(lambda () (interactive) (scroll-up   1)))
  (mouse-wheel-mode t)
  (xterm-mouse-mode t)
  ;; ace-isearch
  (global-ace-isearch-mode 1)
  ;; all-the-icons
  (require 'all-the-icons)
  ;; all-the-icons-dired
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  ;; c-c++
  (add-hook-fn 'c-mode-common-hook
               (c-set-style "stroustrup")
               (c-toggle-auto-hungry-state t))
  ;; fira-code-mode
  (if window-system
      (progn
        (autoload 'fira-code-mode "fira-code-mode")
        (add-hook 'prog-mode-hook 'fira-code-mode)))
  ;; groovy-mode
  (autoload 'groovy-mode "groovy-mode")
  (add-auto-mode "\\.groovy$" groovy-mode)
  (add-hook-fn 'groovy-mode-hook
               (setq groovy-indent-offset 2)
               (require 'groovy-electric)
               (groovy-electric-mode))
  ;; markdown
  (add-hook-fn 'markdown-mode-hook
               (define-key markdown-mode-map (kbd "C-c RET") 'markdown-insert-list-item)
               (remove-hook 'before-save-hook 'delete-trailing-whitespace))
  ;; migemo
  (require 'migemo)
  (setq migemo-coding-system 'utf-8-unix
        migemo-command "cmigemo"
        migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict"
        migemo-options '("-q" "--emacs")
        migemo-regex-dictionary nil
        migemo-user-dictionary nil)
  (migemo-init)
  (with-eval-after-load "helm" (helm-migemo-mode t))
  ;; redo+
  ;; (require 'redo+)
  ;; (global-set-key (kbd "C-M-_") 'redo)
  ;; (setq undo-limit 600000
  ;;       undo-no-redo t
  ;;       undo-strong-limit 900000)
  ;; ruby
  (add-hook-fn 'ruby-mode-hook
               (hs-minor-mode 1)
               (define-key hs-minor-mode-map (kbd "C-\\") 'hs-toggle-hiding)
               (setq flycheck-checker 'ruby-rubocop))
                     ;; flycheck-command-wrapper-function
                     ;; (lambda (command)
                     ;;   (append '("bundle" "exec") command))))
  (let ((ruby-mode-hs-info
         '(ruby-mode
           "class\\|module\\|def\\|if\\|unless\\|case\\|while\\|until\\|for\\|begin\\|do"
           "end"
           "#"
           ruby-move-to-block
           nil)))
    (if (not (member ruby-mode-hs-info hs-special-modes-alist))
        (setq hs-special-modes-alist
              (cons ruby-mode-hs-info hs-special-modes-alist))))
  ;; slim-mode
  (autoload 'toml-mode "slim-mode")
  (add-auto-mode "\\.slim$" slim-mode)
  (add-auto-mode "\\.slm$" slim-mode)
  ;; spacemacs-ui-visual
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  ;; textile-mode
  (autoload 'textile-mode "textile-mode")
  (add-auto-mode "\\.textile$" textile-mode)
  ;; toml-mode
  (autoload 'toml-mode "toml-mode")
  (add-auto-mode "\\.toml$" toml-mode)
  ;; undohist
  (require 'undohist)
  (undohist-initialize)
  ;; yaml-mode
  (add-hook-fn 'yaml-mode-hook
               (yaml-mode-outline-hook)
               (define-key yaml-mode-map (kbd "TAB") 'outline-toggle-children))
  ;; https://github.com/yoshiki/yaml-mode/issues/25
  (defun yaml-outline-level ()
    (s-count-matches "[ ]\\{2\\}" (match-string 0)))
  (defun yaml-mode-outline-hook ()
    (outline-minor-mode)
    (setq outline-regexp "^\\([ ]\\{2\\}\\)*\\([-] \\)?\\([\"][^\"]*[\"]\\|[a-zA-Z0-9_-]*\\): *\\([>|]\\|&[a-zA-Z0-9_-]*\\)?$")
    (setq outline-level 'yaml-outline-level))
  )

(custom-set-variables
 '(auto-save-default nil)
 '(auto-save-list-file-name nil t)
 '(auto-save-list-file-prefix nil)
 '(backup-inhibited t t)
 '(blink-cursor-mode nil)
 '(comment-empty-lines t)
 '(create-lockfiles nil)
 '(delete-auto-save-files t)
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(initial-scratch-message nil)
 '(kill-whole-line t)
 '(make-backup-files nil)
 '(menu-bar-mode nil)
 '(next-line-add-newlines nil)
 '(package-selected-packages
   (quote
    (ac-ispell ace-isearch ace-jump-helm-line ace-link ace-window adaptive-wrap aggressive-indent all-the-icons all-the-icons-dired anaconda-mode ansible ansible-doc anzu async auto-compile auto-complete auto-dictionary auto-highlight-symbol auto-yasnippet avy bind-key bind-map bundler chruby clang-format clean-aindent-mode cmake-mode coffee-mode column-enforce-mode company company-anaconda company-ansible company-c-headers company-emoji company-go company-shell company-statistics company-tern company-web csv-mode cython-mode dash dash-functional diminish disaster docker docker-tramp dockerfile-mode dumb-jump elisp-slime-nav emmet-mode emoji-cheat-sheet-plus epl eval-sexp-fu evil evil-anzu evil-args evil-ediff evil-escape evil-exchange evil-iedit-state evil-indent-plus evil-lisp-state evil-magit evil-matchit evil-mc evil-nerd-commenter evil-numbers evil-search-highlight-persist evil-surround evil-tutor evil-unimpaired evil-visual-mark-mode evil-visualstar exec-path-from-shell expand-region eyebrowse f fancy-battery fill-column-indicator fira-code-mode fish-mode flx flx-ido flycheck flycheck-pos-tip flyspell-correct flyspell-correct-helm fuzzy ggtags gh gh-md gist git-commit git-link git-messenger git-timemachine gitattributes-mode gitconfig-mode github-browse-file github-clone github-search gitignore-mode go-eldoc go-guru go-mode golden-ratio google-translate goto-chg groovy-mode haml-mode hcl-mode helm helm-ag helm-c-yasnippet helm-company helm-core helm-css-scss helm-descbinds helm-flx helm-gitignore helm-gtags helm-make helm-mode-manager helm-projectile helm-pydoc helm-swoop helm-themes highlight highlight-indentation highlight-numbers highlight-parentheses hl-todo ht hungry-delete hy-mode hydra ibuffer-projectile iedit imenu-list indent-guide inf-ruby insert-shebang jinja2-mode js-doc js2-mode js2-refactor json-mode json-reformat json-snatcher launchctl link-hint linum-relative live-py-mode livid-mode logito lorem-ipsum lv macrostep magit magit-gh-pulls magit-gitflow magit-popup markdown-mode markdown-toc marshal memoize migemo minitest mmm-mode move-text multiple-cursors mwim neotree nginx-mode open-junk-file org-bullets org-plus-contrib orgit osx-dictionary osx-trash packed paradox parent-mode pbcopy pcache pcre2el persp-mode pip-requirements pkg-info plantuml-mode popup popwin pos-tip powerline projectile pug-mode py-isort pyenv-mode pytest pythonic pyvenv quelpa rainbow-delimiters rake rbenv request restart-emacs reveal-in-osx-finder robe rspec-mode rubocop ruby-test-mode ruby-tools rvm s sass-mode scss-mode simple-httpd skewer-mode slim-mode smartparens smeargle smex spaceline spinner srefactor stickyfunc-enhance systemd tablist tagedit tern terraform-mode textile-mode toc-org toml-mode transient undo-tree undohist unfill use-package uuidgen vi-tilde-fringe volatile-highlights wakatime-mode web-beautify web-completion-data web-mode which-key winum with-editor ws-butler yaml-mode yapfify yasnippet)))
 '(require-final-newline t)
 '(scroll-bar-mode nil)
 '(tool-bar-mode nil)
 '(transient-mark-mode t))

(custom-set-faces
 )
