;; -*- mode: emacs-lisp -*-

(defun dotspacemacs/layers ()
  (setq-default
   dotspacemacs-distribution 'spacemacs
   dotspacemacs-enable-lazy-installation 'unused
   dotspacemacs-ask-for-lazy-installation t
   dotspacemacs-configuration-layer-path '()
   dotspacemacs-configuration-layers
   '(
     ;; Checkers
     spell-checking ;; brew install ispell
     syntax-checking
     ;; Completion
     auto-completion
     helm
     ;; Distributions
     spacemacs
     spacemacs-base
     spacemacs-bootstrap
     ;; Emacs
     (better-defaults :variables
                      better-defaults-move-to-beginning-of-code-first t
                      better-defaults-move-to-end-of-code-first t)
     ibuffer
     semantic
     smex
     ;; Fun
     emoji
     ;; Operating systems
     osx
     ;; Programming and markup languages
     (c-c++ :variables
            c-basic-offset 2)
     csv
     emacs-lisp
     (go :variables
         gofmt-command "goimports"
         go-tab-width 2)
     (html :variables
           css-indent-offset 2
           cssm-indent-function #'cssm-c-style-indenter)
     (javascript :variables ;; npm install -g tern js-beautify eslint
                 javascript-disable-tern-port-files nil
                 js2-basic-offset 2
                 js-indent-level 2
                 coffee-tab-width 2)
     (markdown :valiables ;; brew install multimarkdown && npm install -g vmd
               markdown-live-preview-engine 'vmd
               markdown-command "multimarkdown")
     python
     (ruby :variables ;; gem install pry pry-doc ruby_parser rubocop
           ruby-version-manager 'rvm
           ruby-test-runner 'rspec
           ruby-insert-encoding-magic-comment nil)
     shell-scripts
     yaml
     ;; Source control
     (git :variables
          vc-follow-symlinks t)
     github
     ;; Spacemacs distribution layers
     spacemacs-completion
     spacemacs-editing
     spacemacs-editing-visual
     spacemacs-layouts
     spacemacs-misc
     spacemacs-ui
     spacemacs-ui-visual
     ;; Tags
     gtags ;; brew install global --with-pygments --with-ctags
     ;; Tools
     ansible
     docker
     imenu-list
     nginx
     systemd
     ;; Vim
     vim-powerline ;; brew install ricty --with-powerline
     ;; Web services
     ;; (wakatime :variables
     ;;           wakatime-api-key  (replace-regexp-in-string "\n+$" ""
     ;;                                                       (shell-command-to-string "grep api_key ~/.wakatime.cfg | awk '{print $3}'"))
     ;;           wakatime-cli-path (replace-regexp-in-string "\n+$" ""
     ;;                                                       (shell-command-to-string "which wakatime")))
     )
   dotspacemacs-additional-packages
   '(
     ace-isearch
     all-the-icons
     all-the-icons-dired
     groovy-mode
     migemo ;; brew install cmigemo
     terraform-mode
     textile-mode
     toml-mode
     undohist
     ;; redo+
     )
   dotspacemacs-frozen-packages '()
   dotspacemacs-excluded-packages '()
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  (setq-default
   dotspacemacs-elpa-https t
   dotspacemacs-elpa-timeout 5
   dotspacemacs-check-for-update t
   dotspacemacs-elpa-subdirectory nil
   dotspacemacs-editing-style 'emacs
   dotspacemacs-verbose-loading nil
   dotspacemacs-startup-banner 'official
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))
   dotspacemacs-startup-buffer-responsive t
   dotspacemacs-scratch-mode 'text-mode
   dotspacemacs-themes '(spacemacs-dark)
   dotspacemacs-colorize-cursor-according-to-state t
   dotspacemacs-default-font '("Ricty for Powerline"
                               :size 16
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   dotspacemacs-leader-key "SPC"
   dotspacemacs-emacs-command-key "SPC"
   dotspacemacs-ex-command-key ":"
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   dotspacemacs-distinguish-gui-tab nil
   dotspacemacs-remap-Y-to-y$ nil
   dotspacemacs-retain-visual-state-on-shift t
   dotspacemacs-visual-line-move-text nil
   dotspacemacs-ex-substitute-global nil
   dotspacemacs-default-layout-name "Default"
   dotspacemacs-display-default-layout nil
   dotspacemacs-auto-resume-layouts nil
   dotspacemacs-large-file-size 1
   dotspacemacs-auto-save-file-location nil
   dotspacemacs-max-rollback-slots 10
   dotspacemacs-helm-resize nil
   dotspacemacs-helm-no-header t
   dotspacemacs-helm-position 'bottom
   dotspacemacs-helm-use-fuzzy 'always
   dotspacemacs-enable-paste-transient-state nil
   dotspacemacs-which-key-delay 0.4
   dotspacemacs-which-key-position 'bottom
   dotspacemacs-loading-progress-bar t
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native nil
   dotspacemacs-maximized-at-startup nil
   dotspacemacs-active-transparency 90
   dotspacemacs-inactive-transparency 90
   dotspacemacs-show-transient-state-title t
   dotspacemacs-show-transient-state-color-guide t
   dotspacemacs-mode-line-unicode-symbols t
   dotspacemacs-smooth-scrolling t
   dotspacemacs-line-numbers t
   dotspacemacs-folding-method 'evil
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-smart-closing-parenthesis nil
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-persistent-server nil
   dotspacemacs-search-tools '("rg", "ag" "pt" "ack" "grep") ;; brew install ripgrep
   dotspacemacs-default-package-repository nil
   dotspacemacs-whitespace-cleanup t
   ))

(defun dotspacemacs/user-init ()
  (defmacro add-hook-fn (name &rest body)
    `(add-hook ,name #'(lambda () ,@body)))
  (defmacro add-auto-mode (name mode)
    `(setq auto-mode-alist (cons '(,name . ,mode) auto-mode-alist)))
  )

(defun dotspacemacs/user-config ()
  (custom-set-variables
   '(auto-save-default nil)
   '(auto-save-list-file-name nil)
   '(auto-save-list-file-prefix nil)
   '(backup-inhibited t)
   '(blink-cursor-mode nil)
   '(comment-empty-lines t)
   '(create-lockfiles nil)
   '(delete-auto-save-files t)
   '(indent-tabs-mode nil)
   '(inhibit-startup-screen t)
   '(initial-scratch-message nil)
   '(kill-whole-line t)
   '(make-backup-files nil)
   '(menu-bar-mode nil)
   '(next-line-add-newlines nil)
   '(require-final-newline t)
   '(scroll-bar-mode nil)
   '(tool-bar-mode nil)
   '(transient-mark-mode t))
  (setq default-frame-alist '((ns-transparent-titlebar . t)
                              (ns-appearance . dark))
        frame-title-format nil
        ns-use-proxy-icon nil)
  ;; c-c++
  (add-hook-fn 'c-mode-common-hook
               (c-set-style "stroustrup")
               (c-toggle-auto-hungry-state t))
  ;; markdown
  (add-hook-fn 'markdown-mode-hook
               (define-key markdown-mode-map (kbd "C-c RET") 'markdown-insert-list-item)
               (remove-hook 'before-save-hook 'delete-trailing-whitespace))
  ;; ruby
  (add-hook-fn 'ruby-mode-hook
               (hs-minor-mode 1)
               (define-key hs-minor-mode-map (kbd "C-\\") 'hs-toggle-hiding)
               (setq flycheck-checker 'ruby-rubocop))
               ;; (setq flycheck-command-wrapper-function
               ;;       (lambda (command)
               ;;         (append '("bundle" "exec") command))))
  (let ((ruby-mode-hs-info
         '(ruby-mode
           "class\\|module\\|def\\|if\\|unless\\|case\\|while\\|until\\|for\\|begin\\|do"
           "end"
           "#"
           ruby-move-to-block
           nil)))
    (if (not (member ruby-mode-hs-info hs-special-modes-alist))
        (setq hs-special-modes-alist
              (cons ruby-mode-hs-info hs-special-modes-alist))))
  ;; spacemacs-ui-visual
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  ;; ace-isearch
  (global-ace-isearch-mode 1)
  ;; all-the-icons
  (require 'all-the-icons)
  ;; all-the-icons-dired
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  ;; groovy-mode
  (autoload 'groovy-mode "groovy-mode")
  (add-auto-mode "\\.groovy$" groovy-mode)
  (add-hook-fn 'groovy-mode-hook
               (require 'groovy-electric)
               (groovy-electric-mode))
  ;; migemo
  (require 'migemo)
  (setq migemo-command "cmigemo"
        migemo-options '("-q" "--emacs")
        migemo-coding-system 'utf-8-unix
        migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict"
        migemo-user-dictionary nil
        migemo-regex-dictionary nil)
  (migemo-init)
  (with-eval-after-load "helm" (helm-migemo-mode t))
  ;; textile-mode
  (autoload 'textile-mode "textile-mode")
  (add-auto-mode "\\.textile$" textile-mode)
  ;; toml-mode
  (autoload 'toml-mode "toml-mode")
  (add-auto-mode "\\.toml$" toml-mode)
  ;; slim-mode
  (autoload 'toml-mode "slim-mode")
  (add-auto-mode "\\.slim$" slim-mode)
  (add-auto-mode "\\.slm$" slim-mode)
  ;; redo+
  ;; (require 'redo+)
  ;; (global-set-key (kbd "C-M-_") 'redo)
  ;; (setq undo-no-redo t
  ;;       undo-limit 600000
  ;;       undo-strong-limit 900000)
  ;; undohist
  (require 'undohist)
  (undohist-initialize)
  ;; Clipboard
  (setq interprogram-cut-function
        (lambda (text &optional push)
          (let ((process-connection-type nil))
            (let ((proc (start-process "pbcopy" nil "pbcopy")))
              (process-send-string proc text)
              (process-send-eof proc)))))
  (setq interprogram-paste-function
        (lambda ()
          (shell-command-to-string "pbpaste")))
  ;; Completion
  (setq read-buffer-completion-ignore-case t
        read-file-name-completion-ignore-case t)
  ;; Hook
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; Keybind
  (define-key query-replace-map [return] 'act)
  (global-set-key (kbd "C-c r r") 'replace-regexp)
  (global-set-key (kbd "C-c r s") 'replace-string)
  ;; Mouse
  (xterm-mouse-mode t)
  (mouse-wheel-mode t)
  (global-set-key   [mouse-4] '(lambda () (interactive) (scroll-down 1)))
  (global-set-key   [mouse-5] '(lambda () (interactive) (scroll-up   1)))
  ;; https://github.com/syl20bnr/spacemacs/issues/9549
  (require 'helm-bookmark)
  )
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (yapfify yaml-mode ws-butler winum which-key web-mode web-beautify volatile-highlights vi-tilde-fringe uuidgen use-package unfill undohist toml-mode toc-org textile-mode terraform-mode hcl-mode tagedit systemd stickyfunc-enhance srefactor spaceline smex smeargle slim-mode scss-mode sass-mode rvm ruby-tools ruby-test-mode rubocop rspec-mode robe reveal-in-osx-finder restart-emacs rbenv rake rainbow-delimiters pyvenv pytest pyenv-mode py-isort pug-mode powerline popwin pip-requirements persp-mode pcre2el pbcopy paradox spinner osx-trash osx-dictionary orgit org-plus-contrib org-bullets open-junk-file nginx-mode neotree mwim move-text mmm-mode minitest migemo markdown-toc markdown-mode magit-gitflow magit-gh-pulls macrostep lorem-ipsum livid-mode skewer-mode simple-httpd live-py-mode linum-relative link-hint launchctl js2-refactor multiple-cursors js2-mode js-doc jinja2-mode insert-shebang indent-guide imenu-list ibuffer-projectile hydra lv hy-mode hungry-delete hl-todo highlight-parentheses highlight-numbers parent-mode highlight-indentation helm-themes helm-swoop helm-pydoc helm-projectile projectile helm-mode-manager helm-make helm-gtags helm-gitignore request helm-flx helm-descbinds helm-css-scss helm-company helm-c-yasnippet helm-ag haml-mode groovy-mode google-translate golden-ratio go-guru go-eldoc gitignore-mode github-search github-clone github-browse-file gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link gist gh marshal logito pcache ht gh-md ggtags fuzzy flyspell-correct-helm flyspell-correct flycheck-pos-tip pos-tip flycheck pkg-info epl flx-ido flx fish-mode fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist highlight evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit magit transient git-commit with-editor evil-lisp-state smartparens evil-indent-plus evil-iedit-state iedit evil-exchange evil-escape evil-ediff evil-args evil-anzu anzu evil goto-chg undo-tree eval-sexp-fu emoji-cheat-sheet-plus emmet-mode elisp-slime-nav dumb-jump dockerfile-mode docker json-mode tablist magit-popup docker-tramp json-snatcher json-reformat disaster diminish cython-mode csv-mode company-web web-completion-data company-tern dash-functional tern company-statistics company-shell company-go go-mode company-emoji company-c-headers company-ansible company-anaconda company column-enforce-mode coffee-mode cmake-mode clean-aindent-mode clang-format chruby bundler inf-ruby bind-map bind-key auto-yasnippet yasnippet auto-highlight-symbol auto-dictionary auto-compile packed ansible-doc ansible anaconda-mode pythonic f dash s all-the-icons-dired all-the-icons memoize aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line helm avy helm-core async ace-isearch ac-ispell auto-complete popup))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
