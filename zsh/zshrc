#--------------------------------------------------------------------------------
# OS
#--------------------------------------------------------------------------------
case ${OSTYPE} in
    darwin*)
        src_hilite_path="${HOMEBREW_PREFIX}/bin/src-hilite-lesspipe.sh"
        ;;
    linux*)
        src_hilite_path='/usr/share/source-highlight/src-hilite-lesspipe.sh'
        ;;
esac
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# 環境変数
#--------------------------------------------------------------------------------
export EDITOR='nano'
export GREP_OPTIONS='--color=auto'
export LANG=ja_JP.UTF-8
export LESS='-fRX'
export PATH=/usr/local/sbin:${HOMEBREW_PREFIX}/opt/mysql-client@5.7/bin:${HOME}/.local/bin:${PATH}
export TERM='xterm-256color'
bin_formulas=('coreutils' 'gawk' 'gnu-sed');
for formula in ${bin_formulas}; do
    export PATH=${HOMEBREW_PREFIX}/opt/${formula}/libexec/gnubin:${PATH}
done
lib_formulas=('mysql-client@5.7' 'readline');
for formula in ${lib_formulas}; do;
    export CPPFLAGS="-I${HOMEBREW_PREFIX}/opt/${formula}/include ${CPPFLAGS}"
    export LDFLAGS="-L${HOMEBREW_PREFIX}/opt/${formula}/lib ${LDFLAGS}"
    if [[ -z ${PKG_CONFIG_PATH} ]]; then
        export PKG_CONFIG_PATH=${HOMEBREW_PREFIX}/opt/${formula}/lib/pkgconfig
    else
        export PKG_CONFIG_PATH=${HOMEBREW_PREFIX}/opt/${formula}/lib/pkgconfig:${PKG_CONFIG_PATH}
    fi
done
# ヒストリの設定
HISTFILE=~/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# 補完
#--------------------------------------------------------------------------------
# 色を使用出来るようにする
autoload -Uz colors
colors
# 補完機能を有効にする
[ -d ${HOMEBREW_PREFIX}/share/zsh-completions ] && FPATH=${HOMEBREW_PREFIX}/share/zsh-completions:${FPATH}
[ -d ${HOMEBREW_PREFIX}/share/zsh-autosuggestions ] && source ${HOMEBREW_PREFIX}/share/zsh-autosuggestions/zsh-autosuggestions.zsh
autoload -Uz compinit && compinit -u
# 単語の区切り文字を指定する
autoload -Uz select-word-style
select-word-style default
# 補完候補をグループ別に表示する
zstyle ':completion:*' format '%F{white}%B%d%b'
zstyle ':completion:*' group-name ''
# ../ の後は今いるディレクトリを補完しない
zstyle ':completion:*' ignore-parents parent pwd ..
# 補完で展開時にプレフィクスを保持する
zstyle ':completion:*' keep-prefix
# GNU ls の色定義を流用
eval `dircolors ${HOME}/ghq/github.com/hico-horiuchi/initfiles/terminal/dircolors.256dark`
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
# 補完候補のカーソル選択を有効に
zstyle ':completion:*' menu select
# ps コマンドのプロセス名補完
zstyle ':completion:*:processes' command 'ps x -o pid,s,args'
# sudo の後ろでコマンド名を補完する
zstyle ':completion:*:sudo:*' command-path \
       /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin
# ここで指定した文字は単語区切りとみなされる
# / も区切りと扱うので、^W でディレクトリ1つ分を削除できる
zstyle ':zle:*' word-chars ' /=;@:{},|'
zstyle ':zle:*' word-style unspecified
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# キーバインド
#--------------------------------------------------------------------------------
# Emacs 風キーバインドにする
bindkey -e
# AquaSKK 用に Ctrl-J を無効化
bindkey -r '^J'
# Ctrl-R で履歴検索をするときに * でワイルドカードを使用出来るようにする
# bindkey '^R' history-incremental-pattern-search-backward
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# オプション
#--------------------------------------------------------------------------------
# ディレクトリ名だけでcdする
setopt auto_cd
# 補完候補を一覧表示
setopt auto_list
# 補完候補が複数あるときに自動的に一覧表示する
setopt auto_menu
# カッコの対応などを自動的に補完
setopt auto_param_keys
# ディレクトリ名の補完で末尾の / を自動的に付加し、次の補完に備える
# setopt auto_param_slash
# cd したら自動的にpushdする
setopt auto_pushd
# 高機能なワイルドカード展開を使用する
# setopt extended_glob
# 同じコマンドをヒストリに残さない
setopt hist_ignore_all_dups
# スペースから始まるコマンド行はヒストリに残さない
setopt hist_ignore_space
# ヒストリに保存するときに余分なスペースを削除する
setopt hist_reduce_blanks
# ヒストリファイルに保存するとき、すでに重複したコマンドがあったら古い方を削除する
setopt hist_save_nodups
# '#' 以降をコメントとして扱う
setopt interactive_comments
# 補完候補を詰めて表示
setopt list_packed
# 補完候補一覧でファイルの種別をマーク表示
setopt list_types
# = の後はパス名として補完する
setopt magic_equal_subst
# beep を無効にする
setopt no_beep
# フローコントロールを無効にする
setopt no_flow_control
# 最後のスラッシュを自動的に削除しない
setopt noautoremoveslash
# バックグラウンドジョブの状態変化を即時報告
setopt notify
# 日本語ファイル名を表示可能にする
setopt print_eight_bit
# プロンプト定義内で変数置換やコマンド置換を扱う
setopt prompt_subst
# 重複したディレクトリを追加しない
setopt pushd_ignore_dups
# 同時に起動したzshの間でヒストリを共有する
setopt share_history
# 出力の文字列末尾に改行コードが無い場合でも表示
unsetopt promptcr
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# エイリアス
#--------------------------------------------------------------------------------
# sudo の後のコマンドでエイリアスを有効にする
alias sudo='sudo '
# グローバルエイリアス
alias -g L='| less'
alias -g G='| grep'
alias -g N='> /dev/null 2> /dev/null &'
alias -g M='`git ls-files -m`'
# ユーザー定義
alias bundle_install='bundle install --binstubs vendor/bin --jobs 4 --path vendor/bundle --without doc production'
alias cat='bat'
alias emacs='emacsclient -nw'
alias emacs_daemon='/Applications/Emacs.app/Contents/MacOS/Emacs --daemon'
alias kill_emacs="emacsclient -e '(progn (defun yes-or-no-p (p) t) (kill-emacs))'"
alias kubectl='kubecolor'
alias ls='ls -F1 --color=always --show-control-char'
alias ll="ls -Fl --color=always --show-control-char --time-style=+'%Y/%m/%d %H:%M'"
alias la="ls -Fal --color=always --show-control-char --time-style=+'%Y/%m/%d %H:%M'"
alias nkf_Lm='nkf -Lm --overwrite'
alias nkf_Lu='nkf -Lu --overwrite'
alias nkf_Lw='nkf -Lw --overwrite'
alias nkf_e='nkf -e --overwrite'
alias nkf_g='nkf --guess'
alias nkf_s='nkf -s --overwrite'
alias nkf_w='nkf -w --overwrite'
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# 関数
#--------------------------------------------------------------------------------
function docker-ssh() { docker exec -i -t ${1} /bin/bash }
function exists() { which ${1} &> /dev/null }
function set_position() {
    local resolution=$(system_profiler SPDisplaysDataType | grep Resolution | awk '{print $2,$3,$4}')
    local width=${4:-1400} height=${5:-900}
    if [ "${resolution}" = '3840 x 2160' ]; then
        local x=${2:-30} y=${3:-980}
    else
        local x=${2:-130} y=${3:-150}
    fi
    osascript -e "tell application \"System Events\" to set position of first window of application process \"${1}\" to {${x}, ${y}}"
    osascript -e "tell application \"System Events\" to set size of first window of application process \"${1}\" to {${width}, ${height}}"
}
# https://gist.github.com/bmhatfield/f613c10e360b4f27033761bbee4404fd
function get-keychain-environment-variable() {
    security find-generic-password -w -a ${USER} -D 'environment variable' -s "${1}"
}
function set-keychain-environment-variable() {
    local secret
    [ -n "${1}" ] || echo 'Missing environment variable name'
    if [ ${#} -lt 2 ]; then
        read -s '?Environment variable value: ' secret
        echo ''
    else
        secret="${2}"
    fi
    security add-generic-password -U -a ${USER} -D 'environment variable' -s "${1}" -w "${secret}"
}
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# プロンプト
#--------------------------------------------------------------------------------
# RPROMPT
RPROMPT=$'$(_branch_status_check)'
# 表示毎にPROMPTで設定されている文字列を評価する
setopt prompt_subst
# fg[color]表記と$reset_colorを使いたい
# @see https://wiki.archlinux.org/index.php/zsh
function _branch_status_check() {
    local branchname suffix
    # .gitの中だから除外
    [[ "${PWD}" =~ '/\.git(/.*)?$' ]] && return
    branchname=$(_get_branch_name)
    # ブランチ名が無いので除外
    [[ -z ${branchname} ]] && return
    suffix='%{'${reset_color}'%}'
    echo $(_get_branch_status)${suffix}
}
function _get_branch_name() {
    local git==git
    # gitディレクトリじゃない場合のエラーは捨てます
    echo $(${git} rev-parse --abbrev-ref HEAD 2> /dev/null)
}
function _get_branch_status() {
    local git==git branchstatus branchname
    branchname=$(_get_branch_name)
    output=$(${git} status 2> /dev/null)
    if [[ -n $(echo ${output} | grep '^nothing to commit') ]]; then
        branchstatus='%{'${fg[green]}'%}%{'${fg[black]}${bg[green]}'%}  '${branchname}
    elif [[ -n $(echo ${output} | grep '^Untracked files:') ]]; then
        branchstatus='%{'${fg[yellow]}'%}%{'${fg[black]}${bg[yellow]}'%}  '${branchname}
    elif [[ -n $(echo ${output} | grep '^Changes not staged for commit:') ]]; then
        branchstatus='%{'${fg[red]}'%}%{'${fg[black]}${bg[red]}'%}  '${branchname}
    else
        branchstatus='%{'${fg[cyan]}'%}%{'${fg[black]}${bg[cyan]}'%}  '${branchname}
    fi
    echo ${branchstatus}' '
}
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# asdf
#--------------------------------------------------------------------------------
if exists asdf; then
    source ${HOMEBREW_PREFIX}/opt/asdf/libexec/asdf.sh
    plugin_list=$(asdf plugin list)
    # awscli
    if echo ${plugin_list} | grep 'awscli' > /dev/null; then
        autoload -U +X bashcompinit && bashcompinit
        complete -o nospace -C ${HOME}/.asdf/shims/aws_completer aws
    fi
    # gcloud
    if echo ${plugin_list} | grep 'gcloud' > /dev/null; then
        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
        source ${HOME}/.asdf/installs/gcloud/*/completion.zsh.inc
    fi
    # golang
    if echo ${plugin_list} | grep 'golang' > /dev/null; then
        export ASDF_GOLANG_MOD_VERSION_ENABLED=false
        source ${HOME}/.asdf/plugins/golang/set-env.zsh
    fi
    # ruby
    if echo ${plugin_list} | grep 'ruby' > /dev/null; then
        export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
    fi
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# bat
#--------------------------------------------------------------------------------
export BAT_THEME=base16
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# direnv
#--------------------------------------------------------------------------------
if exists direnv; then
    eval "$(direnv hook zsh)"
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# fzf
#--------------------------------------------------------------------------------
if exists fzf; then
    export FZF_DEFAULT_OPTS='--ansi --info=hidden --layout=reverse'
    zsh_fzf_history_search_path=${HOME}/ghq/github.com/joshskidmore/zsh-fzf-history-search/zsh-fzf-history-search.zsh
    if [ -e ${zsh_fzf_history_search_path} ]; then
        export ZSH_FZF_HISTORY_SEARCH_FZF_ARGS='-e +s --no-multi --height=40%'
        export ZSH_FZF_HISTORY_SEARCH_REMOVE_DUPLICATES=1
        source ${zsh_fzf_history_search_path}
    fi
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# gh
#--------------------------------------------------------------------------------
if exists gh; then
    if exists fzf; then
        function _fzf_gh_pr_search() {
            local id
            id=$(gh pr list | awk '{print $1}' | fzf -e -i +s --no-multi --preview-window='right,90%' --preview='GH_FORCE_TTY=1 gh pr view {}')
            if [ -n "${id}" ]; then
                BUFFER="gh pr view ${id} --web"
                CURSOR=${#BUFFER}
                zle accept-line
                zle reset-prompt
            else
                return 1
            fi
        }
        zle -N _fzf_gh_pr_search
        bindkey '^G^P' _fzf_gh_pr_search
    fi
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# ghq
#--------------------------------------------------------------------------------
if exists ghq; then
    if exists fzf; then
        function _fzf_ghq_search() {
            local repository
            ghq_root=$(ghq root)
            repository=$(ghq list | fzf -e -i +s --no-multi --prompt='cd > ' --preview-window='right,67%' --preview="setopt extended_glob; bat --color=always --style=plain ${ghq_root}/{}/(#i)readme* | emojify")
            if [ -n "${repository}" ]; then
                BUFFER="cd ${ghq_root}/${repository}"
                CURSOR=${#BUFFER}
                zle accept-line
                zle reset-prompt
            else
                return 1
            fi
        }
        zle -N _fzf_ghq_search
        bindkey '^G^H' _fzf_ghq_search
    fi
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# git
#--------------------------------------------------------------------------------
if exists ghq; then
    function _fzf_git_branch_search() {
        local branch
        branch=$(git branch -a | grep -v HEAD | fzf -e -i +s --no-multi --prompt='git checkout > ' --preview-window='right,75%' --preview='echo {} | tr -d " *" | xargs git graph --color=always | emojify' | perl -pe 's/\s//g; s/\*//g; s/remotes\/origin\///g')
        if [ -n "${branch}" ]; then
            BUFFER="git checkout ${branch}"
            CURSOR=${#BUFFER}
            zle accept-line
            zle reset-prompt
        else
            return 1
        fi
    }
    zle -N _fzf_git_branch_search
    bindkey '^G^B' _fzf_git_branch_search
    function _fzf_git_tag_search() {
        local tag
        tag=$(git tag | fzf -e -i +s --no-multi --prompt='git checkout > ' --preview-window='right,75%' --preview='echo {} | tr -d " *" | xargs git graph --color=always | emojify')
        if [ -n "${tag}" ]; then
            BUFFER="git checkout ${tag}"
            CURSOR=${#BUFFER}
            zle accept-line
            zle reset-prompt
        else
            return 1
        fi
    }
    zle -N _fzf_git_tag_search
    bindkey '^G^T' _fzf_git_tag_search
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# go
#--------------------------------------------------------------------------------
if exists fzf; then
    function _fzf_go_src_search() {
        local directory
        directory=$(find -L ${HOME}/.asdf/installs/golang/*/packages/src -name .go-version -type f -maxdepth 4 -mindepth 4 | cut -d / -f 7-12 | fzf -e -i +s --no-multi --prompt='cd > ' --preview-window='right,67%' --preview="setopt extended_glob; bat --color=always --style=plain ${HOME}/.asdf/installs/golang/{}/(#i)readme* | emojify")
        if [ -n "${directory}" ]; then
            BUFFER="cd ${HOME}/.asdf/installs/golang/${directory}"
            CURSOR=${#BUFFER}
            zle accept-line
            zle reset-prompt
        else
            return 1
        fi
    }
    zle -N _fzf_go_src_search
    bindkey '^G^G' _fzf_go_src_search
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# heroku
#--------------------------------------------------------------------------------
if exists heroku; then
    [ ! -e ${HOME}/Library/Caches/heroku/autocomplete/commands ] && heroku autocomplete > /dev/null 2>&1
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# hub
#--------------------------------------------------------------------------------
if exists hub; then
    eval "$(hub alias -s)"
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# iterm2
#--------------------------------------------------------------------------------
[ -e "${HOME}/.iterm2_shell_integration.zsh" ] && source "${HOME}/.iterm2_shell_integration.zsh"
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# k
#--------------------------------------------------------------------------------
k_path=${HOME}/ghq/github.com/supercrabtree/k/k.sh
if [ -e ${k_path} ]; then
    source ${k_path}
    alias ll='k -h --no-vcs'
    alias la='k -ah --no-vcs'
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# krew
#--------------------------------------------------------------------------------
[ -d ${HOME}/.krew ] && export PATH=${HOME}/.krew/bin:${PATH}
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# nomad
#--------------------------------------------------------------------------------
if exists nomad; then
    autoload -U +X bashcompinit && bashcompinit
    complete -o nospace -C ${HOMEBREW_PREFIX}/bin/nomad nomad
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# powerline-go
#--------------------------------------------------------------------------------
if exists powerline-go; then
    function _powerline_precmd() {
        PS1=$'\n'"$(powerline-go -error ${?} -jobs ${${(%):%j}:-0} -modules perms,kube,venv,cwd,root -shell zsh)"
    }
    function _install_powerline_precmd() {
        for s in "${precmd_functions[@]}"; do
            [ "${s}" = '_powerline_precmd' ] && return
        done
        precmd_functions+=(_powerline_precmd)
    }
    if [ "${TERM}" != 'linux' ]; then
        _install_powerline_precmd
    fi
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# powerline-shell
#--------------------------------------------------------------------------------
# if exists powerline-shell; then
#     function _powerline_precmd() {
#         PS1=$'\n'"$(powerline-shell --shell zsh ${?}) "
#     }
#     function _install_powerline_precmd() {
#         for s in "${precmd_functions[@]}"; do
#             [ "${s}" = '_powerline_precmd' ] && return
#         done
#         precmd_functions+=(_powerline_precmd)
#     }
#     if [ "${TERM}" != 'linux' ]; then
#         _install_powerline_precmd
#     fi
# fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# sensuctl
#--------------------------------------------------------------------------------
[ -d ${HOME}/.config/sensu/sensuctl ] && source <(sensuctl completion zsh)
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# source-highlight
#--------------------------------------------------------------------------------
[ -e ${src_hilite_path} ] && export LESSOPEN="| ${src_hilite_path} %s"
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# ssh
#--------------------------------------------------------------------------------
# https://stackoverflow.com/questions/59940971/zsh-autocomplete-slow-for-ssh
function _refresh_ssh_autocomplete () {
    host_list=($(cat ~/.ssh/config | grep 'Host ' | grep -v '*' | awk '{s = s $2 " "} END {print s}'))
    zstyle ':completion:*:(ssh|scp|sftp):*' hosts $host_list
}
_refresh_ssh_autocomplete
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# terraform
#--------------------------------------------------------------------------------
if exists terraform; then
    autoload -U +X bashcompinit && bashcompinit
    complete -o nospace -C ${HOMEBREW_PREFIX}/bin/terraform terraform
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# travis gem
#--------------------------------------------------------------------------------
[ -e ${HOME}/.travis/travis.sh ] && source ${HOME}/.travis/travis.sh
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# visual studio code
#--------------------------------------------------------------------------------
visual_studio_code_path='/Applications/Visual Studio Code.app'
if [ -e ${visual_studio_code_path} ]; then
    export PATH=${visual_studio_code_path}/Contents/Resources/app/bin:${PATH}
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# wakatime
#--------------------------------------------------------------------------------
# https://github.com/wbingli/zsh-wakatime
export WAKATIME_USE_DIRNAME=true
export ZSH_WAKATIME_PROJECT_DETECTION=true
hasgit=$(type 'git' > /dev/null 2>&1)${?}
function _waka_filename() {
    if [ "x${WAKATIME_USE_DIRNAME}" = 'xtrue' ]; then
        # just use the current working directory
        echo "${PWD}"
    else
        # only command without arguments to avoid senstive information
        echo "${history[$((HISTCMD-1))]}" | cut -d ' ' -f1
    fi
}
function _waka_projectname() {
    if [ "x${ZSH_WAKATIME_PROJECT_DETECTION}" = 'xtrue' ]; then
        if [ ${hasgit} ]; then
            gitproject=$(git config --local remote.origin.url 2> /dev/null | sed 's|.git$||g' | sed -n 's#.*/\([^.]*\)#\1#p')
            echo ${gitproject:-<<LAST_PROJECT>>}
        else
            echo '<<LAST_PROJECT>>'
        fi
    else
        echo 'Terminal'
    fi
}
function _send_wakatime_heartbeat() {
    entity=$(_waka_filename);
    project=$(_waka_projectname);
    if [ "${entity}" ]; then
        (wakatime --write --plugin 'zsh-wakatime/0.0.1' --entity-type app --project ${project} --entity "${entity}" > /dev/null 2>&1 &)
    fi
}
precmd_functions+=(_send_wakatime_heartbeat)
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# z
#--------------------------------------------------------------------------------
z_path=${HOME}/ghq/github.com/rupa/z/z.sh
if [ -e ${z_path} ]; then
    source ${z_path}
    if exists fzf; then
        function _fzf_z_search() {
            local directory
            directory=$(_z -l 2>&1 | sed 's/^[0-9,.]* *//g' | fzf -e -i +s --no-multi --tac --prompt='cd > ' --height='40%')
            if [ -n "${directory}" ]; then
                BUFFER="cd ${directory}"
                CURSOR=${#BUFFER}
                zle accept-line
                zle reset-prompt
            else
                return 1
            fi
        }
        zle -N _fzf_z_search
        bindkey '^F' _fzf_z_search
    fi
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# auto-fu.zsh
#--------------------------------------------------------------------------------
auto_fu_path=${HOME}/ghq/github.com/hchbaw/auto-fu.zsh/auto-fu.zsh
if [ -e ${auto_fu_path} ]; then
    source ${auto_fu_path}
    function zle-line-init() { auto-fu-init }
    zle -N zle-line-init
    # 「-azfu-」を表示させない
    zstyle ':auto-fu:var' postdisplay $''
fi
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# bw
#------------------------------------------------------------------------------
if exists bw; then
    export BW_LAST_SYNC=$(get-keychain-environment-variable BW_LAST_SYNC)
    export BW_PASSWORD=$(get-keychain-environment-variable BW_PASSWORD)
    export BW_SESSION=$(get-keychain-environment-variable BW_SESSION)
    if [ -z "${BW_SESSION}" ]; then
        export BW_SESSION=$(bw unlock --raw --passwordenv BW_PASSWORD 2> /dev/null)
        set-keychain-environment-variable BW_SESSION ${BW_SESSION}
    fi
    if [ -z "${BW_LAST_SYNC}" ] || [ $(expr $(date +%s) - $(date -d ${BW_LAST_SYNC} +%s)) -ge 86400 ]; then
        # sync
        bw sync 2> /dev/null
        export BW_LAST_SYNC=$(date --iso-8601=seconds)
        set-keychain-environment-variable BW_LAST_SYNC ${BW_LAST_SYNC}
        # export
        tempfile=$(mktemp)
        bw export --format encrypted_json --output ${tempfile} 2> /dev/null
        set-keychain-environment-variable BW_ENCRYPTED_EXPORT $(cat ${tempfile} | jq -c)
        rm ${tempfile}
    fi
fi
#------------------------------------------------------------------------------
